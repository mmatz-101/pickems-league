// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package databases

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type League string

const (
	LeagueNFL   League = "NFL"
	LeagueNCAAF League = "NCAAF"
)

func (e *League) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = League(s)
	case string:
		*e = League(s)
	default:
		return fmt.Errorf("unsupported scan type for League: %T", src)
	}
	return nil
}

type NullLeague struct {
	League League
	Valid  bool // Valid is true if League is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLeague) Scan(value interface{}) error {
	if value == nil {
		ns.League, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.League.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLeague) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.League, nil
}

type SeasonType string

const (
	SeasonTypePRE  SeasonType = "PRE"
	SeasonTypeREG  SeasonType = "REG"
	SeasonTypePOST SeasonType = "POST"
)

func (e *SeasonType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SeasonType(s)
	case string:
		*e = SeasonType(s)
	default:
		return fmt.Errorf("unsupported scan type for SeasonType: %T", src)
	}
	return nil
}

type NullSeasonType struct {
	SeasonType SeasonType
	Valid      bool // Valid is true if SeasonType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSeasonType) Scan(value interface{}) error {
	if value == nil {
		ns.SeasonType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SeasonType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSeasonType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.SeasonType, nil
}

type SpreadPicks string

const (
	SpreadPicksHOME SpreadPicks = "HOME"
	SpreadPicksAWAY SpreadPicks = "AWAY"
)

func (e *SpreadPicks) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SpreadPicks(s)
	case string:
		*e = SpreadPicks(s)
	default:
		return fmt.Errorf("unsupported scan type for SpreadPicks: %T", src)
	}
	return nil
}

type NullSpreadPicks struct {
	SpreadPicks SpreadPicks
	Valid       bool // Valid is true if SpreadPicks is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSpreadPicks) Scan(value interface{}) error {
	if value == nil {
		ns.SpreadPicks, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SpreadPicks.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSpreadPicks) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.SpreadPicks, nil
}

type SpreadType string

const (
	SpreadTypeFAVORITE SpreadType = "FAVORITE"
	SpreadTypeUNDERDOG SpreadType = "UNDERDOG"
)

func (e *SpreadType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SpreadType(s)
	case string:
		*e = SpreadType(s)
	default:
		return fmt.Errorf("unsupported scan type for SpreadType: %T", src)
	}
	return nil
}

type NullSpreadType struct {
	SpreadType SpreadType
	Valid      bool // Valid is true if SpreadType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSpreadType) Scan(value interface{}) error {
	if value == nil {
		ns.SpreadType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SpreadType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSpreadType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.SpreadType, nil
}

type SpreadWinner string

const (
	SpreadWinnerHOME         SpreadWinner = "HOME"
	SpreadWinnerAWAY         SpreadWinner = "AWAY"
	SpreadWinnerPUSH         SpreadWinner = "PUSH"
	SpreadWinnerUNDETERMINED SpreadWinner = "UNDETERMINED"
)

func (e *SpreadWinner) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SpreadWinner(s)
	case string:
		*e = SpreadWinner(s)
	default:
		return fmt.Errorf("unsupported scan type for SpreadWinner: %T", src)
	}
	return nil
}

type NullSpreadWinner struct {
	SpreadWinner SpreadWinner
	Valid        bool // Valid is true if SpreadWinner is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSpreadWinner) Scan(value interface{}) error {
	if value == nil {
		ns.SpreadWinner, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SpreadWinner.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSpreadWinner) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.SpreadWinner, nil
}

type Game struct {
	ID                string       `json:"id"`
	CreatedAt         time.Time    `json:"created_at"`
	UpdatedAt         time.Time    `json:"updated_at"`
	HometeamFullname  string       `json:"hometeam_fullname"`
	HometeamShortname string       `json:"hometeam_shortname"`
	HometeamLogourl   string       `json:"hometeam_logourl"`
	AwayteamFullname  string       `json:"awayteam_fullname"`
	AwayteamShortname string       `json:"awayteam_shortname"`
	AwayteamLogourl   string       `json:"awayteam_logourl"`
	Channel           string       `json:"channel"`
	Date              time.Time    `json:"date"`
	Status            string       `json:"status"`
	Year              int32        `json:"year"`
	Week              int32        `json:"week"`
	Weekname          string       `json:"weekname"`
	Homeorunderline   float64      `json:"homeorunderline"`
	Homeorunderodd    int32        `json:"homeorunderodd"`
	Awayoroverline    float64      `json:"awayoroverline"`
	Awayoroverodd     int32        `json:"awayoroverodd"`
	CreatedAtVegas    string       `json:"created_at_vegas"`
	Sportsbookid      int32        `json:"sportsbookid"`
	Homescore         int32        `json:"homescore"`
	Awayscore         int32        `json:"awayscore"`
	GameSpreadWinner  SpreadWinner `json:"game_spread_winner"`
	SeasonType        SeasonType   `json:"season_type"`
	League            League       `json:"league"`
}

type Pick struct {
	Username         string       `json:"username"`
	GameID           string       `json:"game_id"`
	CreatedAt        time.Time    `json:"created_at"`
	UpdatedAt        time.Time    `json:"updated_at"`
	Year             int32        `json:"year"`
	Week             int32        `json:"week"`
	League           League       `json:"league"`
	UserPick         SpreadPicks  `json:"user_pick"`
	UserPickType     SpreadType   `json:"user_pick_type"`
	GameSpreadWinner SpreadWinner `json:"game_spread_winner"`
}

type User struct {
	Username     string    `json:"username"`
	FullName     string    `json:"full_name"`
	Email        string    `json:"email"`
	HashPassword string    `json:"hash_password"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}
